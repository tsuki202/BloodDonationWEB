package view;

import entity.Donation;
import entity.Donor;
import entity.UserData;
import lombok.RequiredArgsConstructor;
import service.DonorService;
import org.springframework.stereotype.Component;

import java.sql.Date;
import java.time.LocalDate;
import java.util.List;
import java.util.Scanner;

@Component
@RequiredArgsConstructor
public class DonorView {
    private final DonorService donorService;
    private final Scanner scanner = new Scanner(System.in);

    public void showMenu(Donor donor, UserData userData) {
        while (true) {
            System.out.println("\nüßë‚Äç‚öïÔ∏è –ú–µ–Ω—é –¥–æ–Ω–æ—Ä–∞:");
            System.out.println("1 - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å");
            System.out.println("2 - –û–Ω–æ–≤–∏—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é");
            System.out.println("3 - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞");
            System.out.println("4 - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –¥–æ–Ω–∞—Ü—ñ—é");
            System.out.println("5 - –í–∏–π—Ç–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é");
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

            String input = scanner.nextLine();
            switch (input) {
                case "1" -> displayProfile(donor);
                case "2" -> updateDonorInfo(donor);
                case "3" -> displayDonationHistory(donor.getId());
                case "4" -> addNewDonation(donor.getId());
                case "5" -> { return; }
                default -> System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            }
        }
    }

    private void displayProfile(Donor donor) {
        System.out.println("\nüìã –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:");
        System.out.println("üîπ –Ü–º'—è: " + donor.getName());
        System.out.println("üîπ –ü—Ä—ñ–∑–≤–∏—â–µ: " + donor.getSurname());
        System.out.println("üîπ –†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: " + donor.getYear());
        System.out.println("üîπ –ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: " + donor.getBloodType());
        System.out.println("üîπ –í–∞–≥–∞ (–∫–≥): " + donor.getWeight());
        System.out.println("üîπ –ó—Ä—ñ—Å—Ç (—Å–º): " + donor.getHeight());
    }

    private void updateDonorInfo(Donor donor) {
        System.out.println("\n‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é (–ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è –∑–∞–ª–∏—à–∞—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω):");

        System.out.print("–Ü–º'—è [" + donor.getName() + "]: ");
        String name = scanner.nextLine().trim();
        if (name.isEmpty()) name = null;

        System.out.print("–ü—Ä—ñ–∑–≤–∏—â–µ [" + donor.getSurname() + "]: ");
        String surname = scanner.nextLine().trim();
        if (surname.isEmpty()) surname = null;

        System.out.print("–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è [" + donor.getYear() + "]: ");
        String yearStr = scanner.nextLine().trim();
        Integer year = yearStr.isEmpty() ? null : Integer.parseInt(yearStr);

        System.out.print("–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ [" + donor.getBloodType() + "]: ");
        String bloodType = scanner.nextLine().trim();
        if (bloodType.isEmpty()) bloodType = null;

        System.out.print("–í–∞–≥–∞ (–∫–≥) [" + donor.getWeight() + "]: ");
        String weightStr = scanner.nextLine().trim();
        Integer weight = weightStr.isEmpty() ? null : Integer.parseInt(weightStr);

        System.out.print("–ó—Ä—ñ—Å—Ç (—Å–º) [" + donor.getHeight() + "]: ");
        String heightStr = scanner.nextLine().trim();
        Integer height = heightStr.isEmpty() ? null : Integer.parseInt(heightStr);

        boolean success = donorService.updateDonorInfo(donor.getId(), name, surname, year, bloodType, weight, height);
        if (success) {
            System.out.println("‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.");
        } else {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.");
        }
    }

    private void displayDonationHistory(Integer donorId) {
        List<Donation> donations = donorService.getDonationHistory(donorId);
        System.out.println("\nüìú –Ü—Å—Ç–æ—Ä—ñ—è –¥–æ–Ω–∞—Ü—ñ–π:");

        if (donations.isEmpty()) {
            System.out.println("–í–∏ —â–µ –Ω–µ –∑–¥–∞–≤–∞–ª–∏ –∫—Ä–æ–≤. –ó–∞–ø–ª–∞–Ω—É–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä—à—É –¥–æ–Ω–∞—Ü—ñ—é!");
        } else {
            for (Donation donation : donations) {
                System.out.println("üîπ –î–∞—Ç–∞: " + donation.getDonationDate() +
                        ", –ö—ñ–ª—å–∫—ñ—Å—Ç—å: " + donation.getAmount() + " –º–ª, –ú—ñ—Å—Ü–µ: " + donation.getLocation());
            }
        }
    }

    private void addNewDonation(Integer donorId) {
        System.out.println("\n‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –¥–æ–Ω–∞—Ü—ñ—ó:");

        System.out.print("–î–∞—Ç–∞ (YYYY-MM-DD) [—Å—å–æ–≥–æ–¥–Ω—ñ]: ");
        String dateStr = scanner.nextLine().trim();
        Date donationDate = dateStr.isEmpty()
                ? Date.valueOf(LocalDate.now())
                : Date.valueOf(dateStr);

        System.out.print("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–ª [450]: ");
        String amountStr = scanner.nextLine().trim();
        Integer amount = amountStr.isEmpty() ? 450 : Integer.parseInt(amountStr);

        System.out.print("–ú—ñ—Å—Ü–µ –¥–æ–Ω–∞—Ü—ñ—ó: ");
        String location = scanner.nextLine().trim();

        boolean success = donorService.createDonationRecord(donorId, donationDate, amount, location);
        if (success) {
            System.out.println("‚úÖ –î–æ–Ω–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏.");
        } else {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ–Ω–∞—Ü—ñ—ó.");
        }
    }
}
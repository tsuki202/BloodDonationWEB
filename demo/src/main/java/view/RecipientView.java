package view;

import entity.Donor;
import entity.Recipient;
import entity.UserData;
import lombok.RequiredArgsConstructor;
import service.DonorService;
import service.RecipientService;
import org.springframework.stereotype.Component;

import java.sql.Date;
import java.time.LocalDate;
import java.util.List;
import java.util.Scanner;

@Component
@RequiredArgsConstructor
public class RecipientView {
    private final RecipientService recipientService;
    private final DonorService donorService;
    private final Scanner scanner = new Scanner(System.in);

    public void showMenu(Recipient recipient, UserData userData) {
        while (true) {
            System.out.println("\nüè• –ú–µ–Ω—é —Ä–µ—Ü–∏–ø—ñ—î–Ω—Ç–∞:");
            System.out.println("1 - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å");
            System.out.println("2 - –û–Ω–æ–≤–∏—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é");
            System.out.println("3 - –ó–Ω–∞–π—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –¥–æ–Ω–æ—Ä—ñ–≤");
            System.out.println("4 - –í–∏–π—Ç–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é");
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

            String input = scanner.nextLine();
            switch (input) {
                case "1" -> displayProfile(recipient);
                case "2" -> updateRecipientInfo(recipient);
                case "3" -> findPotentialDonors(recipient);
                case "4" -> { return; }
                default -> System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            }
        }
    }

    private void displayProfile(Recipient recipient) {
        System.out.println("\nüìã –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:");
        System.out.println("üîπ –Ü–º'—è: " + recipient.getName());
        System.out.println("üîπ –ü—Ä—ñ–∑–≤–∏—â–µ: " + recipient.getSurname());
        System.out.println("üîπ –†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: " + recipient.getYear());
        System.out.println("üîπ –ü–æ—Ç—Ä—ñ–±–Ω–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: " + recipient.getNeededBloodType());
        System.out.println("üîπ –î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É: " + recipient.getRequestDate());
        System.out.println("üîπ –î—ñ–π—Å–Ω–∏–π –¥–æ: " + recipient.getValidUntil());
        System.out.println("üîπ –ú–µ–¥–∏—á–Ω–∏–π —Å—Ç–∞–Ω: " + recipient.getMedicalCondition());
    }

    private void updateRecipientInfo(Recipient recipient) {
        System.out.println("\n‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é (–ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è –∑–∞–ª–∏—à–∞—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω):");

        System.out.print("–Ü–º'—è [" + recipient.getName() + "]: ");
        String name = scanner.nextLine().trim();

        System.out.print("–ü—Ä—ñ–∑–≤–∏—â–µ [" + recipient.getSurname() + "]: ");
        String surname = scanner.nextLine().trim();

        System.out.print("–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è [" + recipient.getYear() + "]: ");
        String yearStr = scanner.nextLine().trim();

        System.out.print("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ [" + recipient.getNeededBloodType() + "]: ");
        String bloodType = scanner.nextLine().trim();

        System.out.print("–ú–µ–¥–∏—á–Ω–∏–π —Å—Ç–∞–Ω [" + recipient.getMedicalCondition() + "]: ");
        String medicalCondition = scanner.nextLine().trim();

        System.out.print("–î—ñ–π—Å–Ω–∏–π –¥–æ (YYYY-MM-DD) [" + recipient.getValidUntil() + "]: ");
        String validUntilStr = scanner.nextLine().trim();

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        Recipient updatedRecipient = new Recipient();
        updatedRecipient.setId(recipient.getId());
        updatedRecipient.setName(name.isEmpty() ? recipient.getName() : name);
        updatedRecipient.setSurname(surname.isEmpty() ? recipient.getSurname() : surname);
        updatedRecipient.setYear(yearStr.isEmpty() ? recipient.getYear() : Integer.parseInt(yearStr));
        updatedRecipient.setNeededBloodType(bloodType.isEmpty() ? recipient.getNeededBloodType() : bloodType);
        updatedRecipient.setMedicalCondition(medicalCondition.isEmpty() ? recipient.getMedicalCondition() : medicalCondition);
        updatedRecipient.setRequestDate(recipient.getRequestDate());
        updatedRecipient.setValidUntil(validUntilStr.isEmpty() ? recipient.getValidUntil() : Date.valueOf(validUntilStr));

        boolean success = recipientService.updateRecipientInfo(updatedRecipient);
        if (success) {
            System.out.println("‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.");
        } else {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.");
        }
    }

    private void findPotentialDonors(Recipient recipient) {
        System.out.println("\nüîç –ü–æ—à—É–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –¥–æ–Ω–æ—Ä—ñ–≤ –¥–ª—è –≥—Ä—É–ø–∏ –∫—Ä–æ–≤—ñ: " + recipient.getNeededBloodType());

        List<Donor> compatibleDonors = donorService.getDonorsByBloodType(recipient.getNeededBloodType());

        if (compatibleDonors.isEmpty()) {
            System.out.println("‚ùå –ù–∞ –∂–∞–ª—å, –¥–æ–Ω–æ—Ä—ñ–≤ –∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ—é –≥—Ä—É–ø–æ—é –∫—Ä–æ–≤—ñ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤ —Å–∏—Å—Ç–µ–º—ñ.");
        } else {
            System.out.println("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –¥–æ–Ω–æ—Ä—ñ–≤: " + compatibleDonors.size());
            for (Donor donor : compatibleDonors) {
                System.out.println("üîπ " + donor.getName() + " " + donor.getSurname() +
                        " (–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: " + donor.getBloodType() + ")");
            }
            System.out.println("\n–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –¥–æ–Ω–æ—Ä–∞–º–∏.");
        }
    }
}